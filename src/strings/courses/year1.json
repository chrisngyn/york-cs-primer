[
    {
        "title": "EECS1001 - Research Directions in Computing",
        "text": "This course introduces various computer science research topics through a series of weekly lectures (topics will vary each year). If you like research and want to do it in the future, you'll enjoy this course. This is a very easy course, and it's pass or fail (no grade received). To pass, you need to attend class (attendance is checked) and do the assignments / quizzes, which typically don't take longer than an hour. \n\n Difficulty: 0 / 10."
    },
    {
        "title": "EECS1012 (Intro to CS, Web) or EECS1015 (Intro to CS, Python)",
        "text": "These are introductory programming courses. EECS1012 is web development and you'll learn HTML, CSS, and JavaScript. In EECS1015, you'll learn Python. \n\n Both are relatively easy, and if you have any prior coding experience this will be even easier. If you're new to programming, it can be challenging depending how quickly you can learn. I recommend EECS1015 because I believe it's the more useful language to know (and I prefer backend to frontend), but if you're interested in making websites then EECS1012 is viable too. \n\n Difficulty: 1 / 10 with prior experience, otherwise 3 / 10. \n\n Resources: you can find a lot of tutorials on YouTube for your choice (HTML/CSS/JS or Python) if you've never coded before. I'd recomend watching a 1-2 hour crash course prior to the course starting if you want to feel more comfortable with programming."
    },
    {
        "title": "EECS1019 - Discrete Mathematics for Computer Science",
        "text": "Discrete math is not your typical mathematics like advanced functions or calculus. This is about math that is related to computer science, and includes topics like logic gates, Boolean algebra, set and graph theory, proofs with induction, etc. \n\n I found the first half of this course to be easy, but it ramped up when we started doing proofs, counting principles, and more. This is a very content heavy course, so I recommend not grouping this with other hard courses (namely calculus II). This is probably the first year course that demanded the most time from me. \n\n Difficulty: 7 / 10. \n\n Resources: Kimberly Brehm's videos https://www.youtube.com/playlist?list=PLl-gb0E4MII28GykmtuBXNUNoej-vY5Rz"
    },
    {
        "title": "EECS1022 - Intro to Object Oriented Programming",
        "text": "An intermediate version of EECS1012/1015. You'll be making mobile apps with Java and Android Studio. Java is the main language York University teaches in and you have another 3-4 Java courses to take, so make sure you become comfortable with it. \n\n I found this course to be hard because I've never coded before, so it was a mix of struggling to learn Java, Android Studio, and how to code in general. Don't fall behind in lectures, and learn what object oriented programming is, it's important! \n\n Difficulty: 3 / 10 with prior experience, otherwise 6 / 10 (especially if you don't know any OOP languages)."
    },
    {
        "title": "MATH1013 or MATH1300 - Differential Calculus with Applications",
        "text": "This is calculus I - mainly derivatives with some integrals near the end. If you did well in calculus in high school, you'll find majority of the course content to be similar, with the newer content not being that much more challenging. If you struggled with calculus in high school, you'll struggle here too. Read the textbook, it really helped. \n\n Difficulty: 3 / 10 if you did well in high school, otherwise 5 / 10. \n\n Resources: Paul's Online Notes https://tutorial.math.lamar.edu/classes/calcI/calcI.aspx"
    },
    {
        "title": "MATH1014 or MATH1310 - Integral Calculus with Applications",
        "text": "This is calculus II - which is entirely integrals. There is an insane ramp in difficulty between calculus I and II, so choose your professor wisely as some are harder than others. I would say this is one of the hardest first year courses; you have to pay attention, can't skip lectures, textbook is a must, and don't pair this course with EECS1019. \n\n Difficulty: 8 / 10 (possibly subjective since I'm bad at calculus and retook this course twice). \n\n Resources: Paul's Online Notes https://tutorial.math.lamar.edu/classes/calcII/calcII.aspx"
    },
    {
        "title": "Foundational Science Requirement (Bachelor of Science)",
        "text": "You need 6.0 science credits from a list of courses, which typically means taking two biology, two chemistry, one of each, or one physics course (biology and chemistry is 3.0 while physics is 6.0). I took both chemistry (CHEM1000, CHEM1001) since I did well in it in high school and walked away with two As. Play to your strengths and take what you find easy. \n\n Biased, but I found chemistry easiest. I've heard biology is a lot of memorization, and physics is a lot of math. To me, chemistry is the middle ground where there's some theory, and some math as well."
    },
    {
        "title": "Electives",
        "text": "You need 90.0 / 120.0 credits for the regular / honours degree. \n\n The core subjects (computer science, science, and math requirements) don't fill the credit count completely, so you'll be taking a few electives each year. \n\n Everyone's different, but I advise not taking more than 5 courses a semester. You can always take 1-2 courses in summer school as well to subsidize, if you choose not to take any during the normal fall / winter year. \n\n I took one year long elective in my first year, POLS1000 6.0. It was okay, I got a B. Really boring."
    }
]
