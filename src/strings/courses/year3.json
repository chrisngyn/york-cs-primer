[
    {
        "title": "EECS3000 - Professional Practice in Computing",
        "text": "Note: if you're deciding to NOT do your honours, you don't have to take this course. \n\n This course is about ethics in computer science. You'll be reading a lot of papers and writing essays in this one - no coding at all. When I took this, the course was six essays, attendance, and an exam. The final exam was brutal, and the course is boring. You can squeak by with a C / C+ by doing the assignments and skipping all the lectures, but if you want an A you need effort. \n\n Difficulty: 4 / 10 (if you choose to take it easy. It's minimal effort to get a decent grade, and hard to get a good one)."
    },
    {
        "title": "EECS3101 - Design and Analysis of Algorithms",
        "text": "One of the three holy trinity of third year courses (alongside EECS3221 and EECS3311). This course is about writing and analyzing efficient algorithms. Lots of math, extremely heavy workload, and has a good amount of theory. \n\n If you're a LeetCode / competitive programming nerd then this course should be fine. Take this course seriously. When you're taking interviews in the future, you'll thank yourself. \n\n Difficulty 8 / 10 (though, I got a B+ in this class by barely putting in any effort because I had ~2 years of LeetCode practise, and I knew that generally because it's a hard course, I can safely rely on a bellcurve. My class got bellcurved 12%, lol)."
    },
    {
        "title": "EECS3311 - Software Design",
        "text": "My friends and I used to joke about this course a lot, calling it 'the gatekeeper' since it holds so many people back from graduation. It's less on the difficulty side, but there's just an obscene amount of work. I took this in 2019 when it used to be taught in a crappy and proprietary langauge 'Eiffel' but after years of complaining, the course is now taught in Java / Python. That significantly decreases the difficulty of this course. This course is about writing good software, teaches design principles, and how to be a better engineer overall. At the time of taking the course I'd say it was a 10 / 10 since it was taught in Eiffel, but now it should be a manageable 7.5 / 10."
    },
    {
        "title": "EECS3215 (Embedded Systems) or EECS3221 (Operating System Fundamentals)",
        "text": "Your degree says you can take one of EECS3215 or EECS3221, but 99% of students will be taking EECS3221. This is because by the time you reach third year and get to the point where you decide between these two courses, you'll notice you needed to take a second year physics course to be able to take EECS3215, which is a requirement most students don't have. Since I'm taking the EECS3221 route, I'll talk about that. It's about operating systems, and is taught in C. Pretty heavy courseload. Talks about A LOT of extremely important concepts. Heavy courseload, but also very interesting course too. Don't take Jia Xu. Difficulty 9 / 10."
    },
    {
        "title": "EECS3401 (Artificial Intelligence), EECS3421 (Database Systems), or EECS3461 (User Interfaces)",
        "text": "I went with the EECS3421 route. I really enjoyed it and found it interesting, and was also made me a better developer by the end of it. It teaches databases, what they are, how to use them, SQL, how to make a proper ER diagrams and plan good database schemas, and much more. After taking this course I went back and revisted some of my old personal projects, making them more sophisicated and incorporating a database into them. Fun course and decent workload. Difficulty 6 / 10."
    },
    {
        "title": "Electives",
        "text": "Read my excerpt on electives under year 1 and year 2. At this point in time you should have several electives done, and nearing the end of your degree. If you're taking the non-honours degree then you should be done at the end of this year."
    }
]
